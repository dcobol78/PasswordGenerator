@page "/Password-Generator"
@rendermode RenderMode.InteractiveServer


@using ApplicationCore.Interfaces
@using ApplicationCore.Alphabit
@using WebApp.Components.Modals

@inject IClipboardService ClipboardService
@inject IPasswordService PasswordService

<BufferOverflowModal IsVisible="@isModalVisible" OnClose="CloseModal" />

<h3>Генератор паролей</h3>

<div class="form-group">
    <label>Длина пароля (1 - 255):</label>
    <input type="number" class="form-control" @bind="PasswordLength" @bind:event="oninput" />
</div>

<div class="form-group">
    
    <label>Параметры генерации:</label>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" @bind="useUppercase" />
        <label class="form-check-label">Заглавные буквы</label>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" @bind="useLowercase" />
        <label class="form-check-label">Маленькие буквы</label>
    </div>
    <div class="form-check">
        <input type="checkbox" class="form-check-input" @bind="useNumbers" />
        <label class="form-check-label">Цифры</label>
    </div>
    <p>Алфавит по умолчанию полный.</p>
</div>

<div class="form-group" >
    <label>Количество паролей для генерации:</label>
    <input type="number" class="form-control" @bind="PasswordCount" @bind:event="oninput" style="margin-bottom: 5px" />
</div>

<button class="btn btn-primary" @onclick="GeneratePasswords">Сгенерировать пароли</button>
<button class="btn btn-secondary" @onclick="CopyToClipboard">Скопировать в буфер обмена</button>
<button class="btn btn-success" @onclick="SaveToRepository">Сохранить в базу данных</button>
<button class="btn btn-danger" @onclick="ClearBuffer">Очистить буфер</button>

<div>
    <h5>Результаты генерации</h5>
    <ul>
        @if (GeneratedPasswords != null)
        {
            @foreach (var password in GeneratedPasswords)
            {
                <li>@password</li>
            }
        }
    </ul>
</div>

@code
{
    private bool isModalVisible = false;
    private bool useUppercase;
    private bool useLowercase;
    private bool useNumbers;
    private int passwordCount = 1;
    private int passwordLength = 1;

    public int PasswordLength { get => passwordLength; set => passwordLength = value < 1 ? 1 : value > 255 ? 255 : value; }
    public int PasswordCount { get => passwordCount; set => passwordCount = value < 1 ? 1 : value > 1000 ? 1000 : value; }

    public List<string> GeneratedPasswords { get; private set;}

    protected override void OnParametersSet()
    {
        if (GeneratedPasswords != null && GeneratedPasswords.Any())
            GeneratedPasswords.Clear();
        else
            GeneratedPasswords = new();
        var savedPasswords = PasswordService.Passwords;
        foreach (var password in savedPasswords)
        {
            GeneratedPasswords.Add(password.PasswordContent);
        }
    }

    private void CloseModal(bool isVisible)
    {
        isModalVisible = isVisible;
    }

    void GeneratePasswords()
    {
        if (GeneratedPasswords.Count() + passwordCount > 1000)
        {
            isModalVisible = true;
        }
        else
        {
            IAlphabitComponent alphabit = new Alphabit();
            if (useLowercase) alphabit = new LowerDecorator(alphabit);
            if (useUppercase) alphabit = new UpperDecorator(alphabit);
            if (useNumbers) alphabit = new NumbersDecorator(alphabit);
            if (!(useLowercase | useUppercase | useNumbers)) alphabit = new DeafualtDecorator(alphabit);

            if (passwordCount == 1)
            {
                PasswordService.GeneratePassword(alphabit, passwordLength);
            }
            else
            {
                PasswordService.GenerateSomePasswords(alphabit, passwordLength, passwordCount);
            }

            GeneratedPasswords = PasswordService.Passwords.Select(p => p.PasswordContent).ToList();
        }
    }

    async Task CopyToClipboard()
    {
        string textToCopy = string.Join('\n' ,GeneratedPasswords);

        await ClipboardService.CopyTextToClipboard(textToCopy);
    }

    void SaveToRepository()
    {
        if (GeneratedPasswords != null)
        {
            PasswordService.SavePasswords();
        }
    }

    private void ClearBuffer()
    {
        if (GeneratedPasswords != null)
        {
            PasswordService.ClearBuffer();
            GeneratedPasswords.Clear();
        }
    }
}